/**
 * Import function triggers from their respective submodules:
 *
 * const {onCall} = require("firebase-functions/v2/https");
 * const {onDocumentWritten} = require("firebase-functions/v2/firestore");
 *
 * See a full list of supported triggers at https://firebase.google.com/docs/functions
 */

const {setGlobalOptions} = require("firebase-functions");
const {onDocumentCreated} = require("firebase-functions/v2/firestore");
const {onRequest} = require("firebase-functions/v2/https");
const {initializeApp} = require("firebase-admin/app");
const {getFirestore} = require("firebase-admin/firestore");
const nodemailer = require("nodemailer");
const logger = require("firebase-functions/logger");

// Initialize Firebase Admin
initializeApp();

// Set global options for cost control
setGlobalOptions({ maxInstances: 10 });

// Email configuration
const emailConfig = {
  service: 'gmail',
  auth: {
    user: 'zotstoreuci@gmail.com',
    pass: process.env.EMAIL_PASSWORD
  }
};

// Create email transporter
const transporter = nodemailer.createTransport(emailConfig);

// Function to send report email
async function sendReportEmail(reportData) {
  const {
    reporterName,
    reportedUserName,
    reportType,
    explanation,
    timestamp
  } = reportData;

  const mailOptions = {
    from: 'zotstoreuci@gmail.com',
    to: 'zotstoreuci@gmail.com',
    subject: `ZotStore User Reported: ${reportType} - ${reportedUserName}`,
    html: `
      <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;">
        <h2 style="color: #d33; border-bottom: 2px solid #d33; padding-bottom: 10px;">
          ðŸš¨ New User Report Submitted
        </h2>
        
        <div style="background-color: #f8f9fa; padding: 20px; border-radius: 8px; margin: 20px 0;">
          <h3 style="color: #333; margin-top: 0;">Report Details</h3>
          
          <table style="width: 100%; border-collapse: collapse;">
            <tr>
              <td style="padding: 8px 0; font-weight: bold; color: #555;">Report Type:</td>
              <td style="padding: 8px 0; color: #333;">${reportType}</td>
            </tr>
            <tr>
              <td style="padding: 8px 0; font-weight: bold; color: #555;">Reported User:</td>
              <td style="padding: 8px 0; color: #333;">${reportedUserName}</td>
            </tr>
            <tr>
              <td style="padding: 8px 0; font-weight: bold; color: #555;">Reporter:</td>
              <td style="padding: 8px 0; color: #333;">${reporterName}</td>
            </tr>
            <tr>
              <td style="padding: 8px 0; font-weight: bold; color: #555;">Timestamp:</td>
              <td style="padding: 8px 0; color: #333;">${new Date(timestamp.toDate()).toLocaleString()}</td>
            </tr>
          </table>
        </div>
        
        <div style="background-color: #fff3cd; padding: 20px; border-radius: 8px; border-left: 4px solid #ffc107;">
          <h4 style="color: #856404; margin-top: 0;">User's Explanation:</h4>
          <p style="color: #856404; line-height: 1.6; margin: 0;">${explanation}</p>
        </div>
        
        <div style="margin-top: 20px; padding: 15px; background-color: #e9ecef; border-radius: 8px;">
          <p style="margin: 0; color: #6c757d; font-size: 14px;">
            This report was automatically generated by the ZotStore reporting system. 
            Please review and take appropriate action.
          </p>
        </div>
      </div>
    `
  };

  try {
    const result = await transporter.sendMail(mailOptions);
    logger.info('Report email sent successfully:', result);
    return { success: true, messageId: result.messageId };
  } catch (error) {
    logger.error('Error sending report email:', error);
    throw error;
  }
}

// Cloud Function: Triggered when a new report is created
exports.sendReportEmail = onDocumentCreated('reports/{reportId}', async (event) => {
  try {
    const reportData = event.data.data();
    const reportId = event.params.reportId;
    
    logger.info(`Processing new report: ${reportId}`, reportData);
    
    // Send email
    const emailResult = await sendReportEmail(reportData);
    
    // Update the report document with email status
    const db = getFirestore();
    await db.collection('reports').doc(reportId).update({
      emailSent: true,
      emailSentAt: new Date(),
      emailMessageId: emailResult.messageId
    });
    
    logger.info(`Report ${reportId} processed successfully. Email sent.`);
    
  } catch (error) {
    logger.error(`Error processing report ${event.params.reportId}:`, error);
    
    // Update the report document with error status
    try {
      const db = getFirestore();
      await db.collection('reports').doc(event.params.reportId).update({
        emailSent: false,
        emailError: error.message,
        emailErrorAt: new Date()
      });
    } catch (updateError) {
      logger.error('Error updating report with error status:', updateError);
    }
  }
});

// Test function to verify email functionality
exports.testEmail = onRequest(async (request, response) => {
  try {
    const testReportData = {
      reporterName: 'Test User',
      reportedUserName: 'Test Reported User',
      reportType: 'Test Report',
      explanation: 'This is a test report to verify email functionality.',
      timestamp: new Date()
    };
    
    const result = await sendReportEmail(testReportData);
    response.json({ success: true, message: 'Test email sent successfully', result });
  } catch (error) {
    logger.error('Test email failed:', error);
    response.status(500).json({ success: false, error: error.message });
  }
});